<h1>Viper - Adding configuration values</h1>

<p>
The primary host configuration location is a host's LDAP entry, always found
at <i>cn=HOSTNAME,ou=hosts,o=DOM.AIN,ou=clients</i>.

<br><br>
The host entry itself contains only a small number of most important,
host-specific attributes (hostname, macAddress, ipHostNumber) and
the list of classes the host belongs to.
<br><br>
Some other information is also added to the entry by various dynamic
settings, but that is only used to include useful host properties
(such as name of the client it belongs to) and not real configuration data.
<br>
(In the current default setup, this other information
includes DHCP parameters, but that data is not important when
considering hosts in the context of <i>ou=clients</i> LDAP suffix, and
might be removed in the future).
<br><br>
So, as said, host-specific configuration data is not kept directly in the host's
toplevel entry. Configuration values are stored in a one-level subtree under
the host entry. All values (Debian or custom) are saved as Debconf keys,
following the naming pattern of cn=KEY,cn=HOST,ou=hosts,o=DOM.AIN,ou=clients. 
</p>

<h2>Locations for adding configuration values</h2>

<p>
The three overarching ideas of the whole Viper system are to first, avoid all
repetition when data can be derived from already existing information, second,
keep all configuration in one place, and third, have no distinction
between Debconf values and our own configuration values.
</p>
<p>
As as result, we use Debconf format for all configuration, and
we save each config value to some of the three levels:

<ul>
	<li>Host-specific level (i.e. cn=KEY,cn=HOST,ou=hosts,o=DOM.AIN,ou=clients)
	<li>Site-wide level (i.e. cn=KEY,ou=hosts,ou=defaults,o=DOM.AIN,ou=clients)
	<li>Global level (i.e. cn=KEY,ou=hosts,ou=defaults)
</ul>

(Note that each Debconf question consists of a question and template.
Templates are saved to basically the same places as above, just replacing 
<i>ou=hosts</i> with <i>ou=templates</i>.)
</p>

<h2>Accessing configuration values</h2>

<p>
Debconf will not mind the added questions at all, but it will not query
them as it doesn't know about them, of course.

<br><br>
There are a few ways you can take advantage of the configuration
values you add. There are general and Viper-specific approaches.
The general approaches are of
little interest to us, but we list them here for completeness.
The real interest lies in Viper-specific methods.

<br><br>
General methods:

<ul>
	<li> Modify Debconf script for a package to query new Debconf values
	<li> Read values from your scripts
</ul>

Viper-specific methods:

<ul>
	<li> Make the value used during constructing of some other value (i.e. define key client/name, then configure webserver root directory to be /var/www/<i>client_name</i>)

	<li> Flag question with "flags: puppet" to have it automatically appear 
	as Puppet variable which you can use in Puppet manifests, modules and
	ERB templates (i.e. Debconf key ntp/servers, flagged with 'flags: preseed'
	would appear as variable $ntp_servers in manifests and ntp_servers in 
	ERB templates).

</ul>
</p>

<h2>Specific example</h2>

<p>
Here's an example of how to add a Debconf key ntp/servers. It's value will
always expand to the list of NTP servers in the client's domain, and we'll
use it in constructing the host's ntp.conf file.
<br><br>
Debconf template and question for ntp/servers:
<pre>
dn: cn=ntp/servers,ou=templates,ou=defaults
objectClass: top
objectClass: debConfDbEntry
cn: ntp/servers
description: List of NTP servers within a domain
type: string

dn: cn=ntp/servers,ou=hosts,ou=defaults
objectClass: top
objectClass: debConfDbEntry
cn: ntp/servers
owners: viper
flags: puppet
template: ntp/servers
value: find $ ... 2 0 500 3600 (&(objectClass=puppetClient)(puppetClass=ntp::server*)) 0 ipHostNumber \0 \0
</pre>

<br>
Excerpt from ERB template for Puppet module 'ntp':
<pre>
&lt;% ntp_servers.each do |s| -%&gt;
server &lt;%= s %&gt;
&lt;% end -%&gt;
</pre>
</p>

