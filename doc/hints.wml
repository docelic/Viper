<h1>Viper - hints, tips, best practices</h1>

<h2>Viper server on Ubuntu</h2>

<p>
Viper server start on Ubuntu may fail with the following error:
</p>
<p>
Starting OpenLDAP: slapd - failed:
Error Can't locate strict.pm in @INC (@INC contains: /etc/perl
/usr/local/lib/perl/5.10.0 /usr/local/share/perl/5.10.0 /usr/lib/perl5
/usr/share/perl5 /usr/lib/perl/5.10 /usr/share/perl/5.10
/usr/local/lib/site_perl . /etc/ldap/viper) at
/etc/ldap/viper/Viper.pm line 52.<br>
BEGIN failed--compilation aborted at /etc/ldap/viper/Viper.pm line 52.
Compilation failed in require at (eval 2) line 1.<br>
BEGIN failed--compilation aborted at (eval 2) line 1.<br><br>

Can't call method "config" on an undefined value.
</p>
<p>
This is due to AppArmor, which is installed by default on Ubuntu, preventing
slapd from accessing files in "unauthorized" locations.
</p>
<p>
The simplest fix is <b>invoke-rc.d apparmor stop</b>. If you do not want
to stop apparmor, edit its config files to allow slaps access to the
Perl module directories.
</p>

<h2>Keeping directory data in LDIF</h2>

<p>
Modifying or re-loading LDAP data can be inconvenient without a 
suitable LDAP client. The approach I use during development (but that is
also showing long-term viability) is to keep all
data in LDIF format under <i>ldifs/</i> subdirectory, which allows for
simple text editing, then deleting
and re-loading everything from LDIFs to LDAP.
<br><br>
See subdirectory <i>ldifs/</i> where this is working, and where you can 
modify existing or add your own .ldifs, then run <i>make</i> to reload
everything.
</p>

<h2>Editing live LDAP data in a text editor</h2>

<p>
There exists a LDAP editor called ldapvi that is basically "Vi for LDAP".
<br><br>
Try this:<br>
ldapvi -b cn=h2,ou=hosts,o=c1.com,ou=clients -D cn=admin,ou=clients -w blah
</p>

<h2>Extracting LDAP data back to LDIF format</h2>

<p>
Viper-enabled LDAP server already keeps data as files on disk in LDIF format.
<br><br>
So one option is to just copy directory /var/lib/ldap/viper. Another, 
possibly better option, is to find all the .ldif files in there and concatenate
them to a single file that you can modify and reload with 'make' (as explained
above).
<br><br>
Try this:<br>
find /var/lib/ldap/viper -name '*.ldif' | xargs cat &gt; alldata.ldif<br>
</p>

<h2>Base64 encoded values</h2>

<p>
When an attribute value starts with a space or contains any non-standard
formatting or characters, it is Base64-encoded when exported to LDIF, to
preserve the value.
<br><br>
An example might look like this:
</p>
<pre>
extendedDescription:: UGxlYXNlIGVudGVyIHRoZSBob3N0bmFtZSBvZiB0aGUgbWlycm9yIGZy
 b20gd2hpY2ggRGViaWFuIHdpbGwgYmUgZG93bmxvYWRlZC4KCkFuIGFsdGVybmF0ZSBwb3J0IGNhb
 iBiZSBzcGVjaWZpZWQgdXNpbmcgdGhlIHN0YW5kYXJkIFtob3N0bmFtZV06W3BvcnRdIGZvcm1hdC
 4=
</pre>
<p>
You can use 'base64 -d' on the command line to print decoded value. Note that
you should remove the attribute name (extendedDescription::),
newlines and spaces to turn the whole base64-encoded value into a single
line, then paste the line into base64 -d.
</p>
<pre>
$ base64 -d
UGxlYXNlIGVudGVyIHRoZSBob3N0bmFtZSBvZiB0aGUgbWlycm9yIGZyb20gd2hpY2ggRGViaWFuIHdpbGwgYmUgZG93bmxvYWRlZC4KCkFuIGFsdGVybmF0ZSBwb3J0IGNhbiBiZSBzcGVjaWZpZWQgdXNpbmcgdGhlIHN0YW5kYXJkIFtob3N0bmFtZV06W3BvcnRdIGZvcm1hdC4=
[Enter][Ctrl+d]

Reveals the actual text:

"Please enter the hostname of the mirror from which
Debian will be downloaded.

An alternate port can be specified using the standard
[hostname]:[port] format."
</pre>

<h2>Reading LDAP data as filesystem operation</h2>
<p>
It is possible to use <a href="http://ldapfs.org/">ldapfs</a> to "mount"
part of the LDAP tree as disk files. This is an elegant solution if you
want to query data from shell scripts or other places where writing a 
direct LDAP interface may be inconvenient.
</p>

<h2>Starting / re-starting Viper/LDAP</h2>

<p>
In general, you should be able to start, stop or restart the server just
as a regular slapd server,
<b>invoke-rc.d slapd &lt;start|stop|restart...&gt;</b>.
</p>
<p>
However, the Perl/Viper backend uses the Perl library. The library is loaded
by slapd, but is not exported to other loaded libraries (slapd's back-perl
in our case) due to a policy decision made by Debian regarding libtool
and the symbols export flag.
</p>
<p>
Anyway, long story short, use the following variant of the above command
to work around the issue:
</p>
<pre>
LD_PRELOAD=/usr/lib/libperl.so.5.10 invoke-rc.d slapd &lt;start|stop|restart...&gt;
</pre>
<p>
So, you can use any command you want, as long as you prefix it with the 
LD_PRELOAD environment variable setting as shown.
</p>
