<h1>Viper - Setting up an installation server</h1>
<p>
Here's a hands-on guide to setting up a completely functional Viper
server (DHCP + LDAP), on a system running Debian GNU or Ubuntu.
</p>
<h2>Download</h2>
<p>
The easiest way to download the files is to clone them from the Git
repository and place in <i>/etc/ldap/viper/</i>.
<pre>
apt-get install git-core

mkdir -p /etc/ldap
cd /etc/ldap
git clone git://github.com/docelic/Viper.git viper
cd viper
</pre>
</p>

<h2>Setup</h2>

<p>
To set things up after download, you will use script <a
 href="../scripts/viper-setup.sh">scripts/viper-setup.sh</a>.
<br>
The purpose of the script is to get Viper up and
running quickly, with the default config.
The default config is quite independent and can be ran on probably every
machine that does not already run a LDAP and DHCP server.
After the system is running, you will have a clean and known-good base to
start creating your own configuration.<br>
<br>
When ran, the script
should do <span style="font-style: italic;">everything</span>
automatically.<br>
However, for the first time, I suggest you read the script (it contains
comments) and execute commands manually.<br>
<br>
Before running the script, you should do just one thing related to the
DHCP server -- you should create a network interface with IP address 10.0.1.1,
to fit in the example subnet used by our default config. Then, you can run
the install script with the name of the physical interface. Here's the session
transcript:
<pre>
ifconfig eth0:1 inet 10.0.1.1 netmask 255.255.255.0
invoke-rc.d ipmasq restart # (If you have it installed)

sh scripts/viper-setup.sh eth0
</pre>
To configure eth0:1 on every boot, add it to <i>/etc/network/interfaces</i>
with a stanza like this:
<pre>
allow-hotplug eth0:1
iface eth0:1 inet static
	address 10.0.1.1
	netmask 255.255.255.0
</pre>
<h2>Testing</h2>
After installation, you will get a working setup populated with default
data. This includes a client with name "c1.com", and three hosts, h1,
h2 and h3.<br>
<br>
Based on the default data, there are tests you can run:<br>
<h3>With ldapsearch</h3>
ldapsearch -x -b ou=dhcp<br>
ldapsearch -x -b ou=defaults<br>
ldapsearch -x -b ou=clients<br>
<br>
ldapsearch -x -b cn=h2,ou=hosts,o=c1.com,ou=clients<br>
<br>
ldapsearch -x -b cn=popularity-contest/participate,ou=hosts,ou=defaults<br>
ldapsearch -x -b cn=debian-installer/locale,cn=h2,ou=hosts,o=c1.com,ou=clients<br>
ldapsearch -x -b cn=ntp/servers,cn=h2,ou=hosts,o=c1.com,ou=clients<br>
<h4>Test results</h4>
Ldapsearch query for <i>cn=h2,ou=hosts,o=c1.com,ou=clients</i> is a pretty good
way of determining if everything is working alright. Here's how the output
from the command should look like:
<pre>
$ ldapsearch -x -b cn=h2,ou=hosts,o=c1.com,ou=clients

# extended LDIF
#
# LDAPv3
# base <cn=h2,ou=hosts,o=c1.com,ou=clients> with scope subtree
# filter: (objectclass=*)
# requesting: ALL
#

# h2, hosts, c1.com, clients
dn: cn=h2,ou=hosts,o=c1.com,ou=clients
objectClass: top
objectClass: device
objectClass: dhcpHost
objectClass: ipHost
objectClass: ieee802Device
objectClass: puppetClient
cn: h2
ipHostNumber: 10.0.1.8
macAddress: 00:11:6b:34:ae:8d
puppetclass: test
puppetclass: ntp::server
dhcpHWAddress: ethernet 00:11:6b:34:ae:8d
dhcpOption: host-name "h2"
dhcpOption: routers 10.0.1.1
dhcpOption: domain-name-servers 192.168.1.254
dhcpOption: nis-domain "c1.com"
dhcpOption: domain-name "c1.com"
dhcpOption: subnet-mask 255.255.255.0
dhcpOption: broadcast-address 10.0.1.255
dhcpStatements: fixed-address 10.0.1.8
hostName: h2
ipNetmaskNumber: 255.255.255.0
clientName: c1.com
ipNetworkNumber: 10.0.1.0
ipBroadcastNumber: 10.0.1.255
domainName: c1.com

# search result
search: 2
result: 0 Success

# numResponses: 2
# numEntries: 1
</pre>
<h3>With scripts/node_data</h3>
perl scripts/node_data h2.c1.com<br>
<h3>With scripts/preseed</h3>
QUERY_STRING=ip=10.0.1.8 perl scripts/preseed<br>
<h2>Changing the configuration / adding new clients</h2>
See <a href="client.html">client.html</a>.
<br>
