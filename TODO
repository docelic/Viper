* IDEAS FOR COMPLETING THE THING:

* Test if server side prompter works after changes

* Let exp search a DN if it's not the current DN (prevent loops). Or
 better yet, ignore the DN spec and pull as if it was current entry

* s/\s+/\s/g in ovl opts

* Each puppet thing to save some docs, so one can review all docs and
see everything that Viper/puppet changed differently than default setup.

* Module to use $operatingsystem ? etc for generality

* When Tag() is added to certain class, how to use that?

* Support size/time limit 0 to mean unlimited, max= max

* Support for literal '$' in values (by using escape \$). (Note that you can
already have $ in values as long as ABC in 'ABC $ DEF' does not match name
of one of the existing overlays (which is almost always). But still, having
explicit way of escaping $ should exist.

* Improve capitalizing in puppet.schema

* Note how they can use ipmasq once, then disable it and just save/load fw rules
 via iptables functionality

* Mention that viper-setup.sh will do whole bunch of things, override config
 for slapd, dhcpd, puppet etc. Don't run carelessly.

* Setup local mirror on H15 viper

* Check why host s1 didn't get rewritten to viper

* Document: when writing find $ specs, make sure not to use 0 for time
 or size limit as it'll blow. Actually, check what's really happening there,
 does the result so far get substituted (as it should) or the whole thing
 fails and unprocessed value comes out

* Re-check that cache spec 1o is working well damnit, and support all values
 in all cache types by yamling them

* Rearrange tests/ so that search data is sorted first, OR
* Use Tie::IxHash on all hashes to preserve insertion order?

* Document normal slapd restart, no need for manual LD_PRELOAD any more.

* s/\s+/\s/g in ovl opts

* Document setup errors (like, No subnet declaration for eth1 (10.0.0.1))

* Support for literal '$' in values

* Make viper server also a recursive dns, so can use it as dns instead
 of 192.168.1.254
* configure local bind9 so it resolves according to dhcp leases

* Expiry of attribute values. Set expire $ EPOCH_SECS_TIME adter which
 the attribute is removed from the entry. Support also date2epoch that
 converts your date to epoch secs. It runs first, then expire, then the
 rest of overlays.
 Actually, modify run_overlays to be able to specify ovl list in the
 invocation, and first run expire, then appender, then all overlays.
 That way, attributes from the original entry that are due will be removed
 before appender runs, and will allow appender to add a fresh copy of
 the attribute from the default entry.
 (In other words, expire will expire the attribute in which context it is
 running... so you can specify expire in default entry, but it'll be evaluated
 in context of client key).
 Also, actually, see if expire is basically just a cache spec with initial
 value, but when cache expires, there's nowhere to restore the value from
 so it disappears.

* Support for specifying which OS/distro should be installed, having
 debconf keys that understand it

* Option inside {} to sub search, to specify whether expansion (overlays,
 appender) should be performed. Massive timesaver for things like ntp-servers
 query where you know the entry should already be there and does not need to
 be expanded in any way for the query to operate on it well.

* Check if hash key is deleted if it expires and memoize returns 0 on ->exists(). It's not, so this effectively means in worst-case scenario, when using time/uses based expiry, once could have whole set of ldap data in memory

* local mirror with imported signing key

* check if multiple 'if' options to an overlay work properly

* streamline common work in overlays (put stuff to functions), 
 uniform debug log printing from them etc.

* For every attr that is defined as containing a DN in schema, support
 expansion of dots (".") to components

* udpkg -i partman_auto_raid in ubuntu 8.04 early_command

* entryAppend to be able to say when to append - always, if schema allows,
 if schema allows but not looking at single/multi value etc. Then, use
that to apply default dhcpOptions even if one specifies some of them
in the host entry

* tests/ dir and a suite of test queries diff-ed to expected return values
 based on client c1.com

* Support fileVal to find all $1 or regex matching within the file, return
 them as array, then have joiner as usual

* preseed network interface to eth0 always, because interface=auto is crap

* we use orig DN in ... expansion when targetting base entry, and entry DNs when
 looping thru subentries. This isn't quite alright as it'll break when base DN
 s coming from fallback (baseDN will be origDN, then on subentries, DN will 
 be fallbackDN)

* use ViperConfig.pm (server, bind DN, pw, etc.). Actually, let's just come
 to the stage where users are added to the directory and Viper checks
 credentials on bind (just simple password for start)

* allow rewriting of requested search attrs to return

* document for config file, ldif, value spec, when do \\ have to be 
 escaped, when is SPEC a filter and when a regex etc.

* query na host da otkrije keyeve koji postoje zbog defaulta i ukljuci ih u search osnovnog nivoa

* Make viper server also a recursive dns, so can use it as dns instead
 of 192.168.1.254
* configure local bind9 so it resolves according to dhcp leases

* Expiry of attribute values. Set expire $ EPOCH_SECS_TIME adter which
 the attribute is removed from the entry. Support also date2epoch that
 converts your date to epoch secs. It runs first, then expire, then the
 rest of overlays.
 Actually, modify run_overlays to be able to specify ovl list in the
 invocation, and first run expire, then appender, then all overlays.
 That way, attributes from the original entry that are due will be removed
 before appender runs, and will allow appender to add a fresh copy of
 the attribute from the default entry.
 (In other words, expire will expire the attribute in which context it is
 running... so you can specify expire in default entry, but it'll be evaluated
 in context of client key).
 Also, actually, see if expire is basically just a cache spec with initial
 value, but when cache expires, there's nowhere to restore the value from
 so it disappears.

* Support for specifying which OS/distro should be installed, having
 debconf keys that understand it

* Option inside {} to sub search, to specify whether expansion (overlays,
 appender) should be performed. Massive timesaver for things like ntp-servers
 query where you know the entry should already be there and does not need to
 be expanded in any way for the query to operate on it well.

* origdn support for run_appender just like for run_overlays?

* Check if hash key is deleted if it expires and memoize returns 0 on ->exists(). It's not, so this effectively means in worst-case scenario, when using time/uses based expiry, once could have whole set of ldap data in memory

* local mirror with imported signing key

* check if multiple 'if' options to an overlay work properly. (Actually,
 rework 'if' completely).

* streamline common work in overlays (put stuff to functions), 
 uniform debug log printing from them etc.

* multiple networks per client?

* 'store' overlay that saves computed value for real into the entry, i.e.
  random pw or IP host number

* Instead of splitting and joining whole value for each overlay, split once
 run all overlays, and then join, once.

* For every attr that is defined as containing a DN in schema, support
 expansion of dots (".") to components

* udpkg -i partman_auto_raid in ubuntu 8.04 early_command

* entryAppend to be able to say when to append - always, if schema allows,
 if schema allows but not looking at single/multi value etc. Then, use
that to apply default dhcpOptions even if one specifies some of them
in the host entry

* Support fileVal to find all $1 or regex matching within the file, return
 them as array, then have joiner as usual

* preseed network interface to eth0 always, because interface=auto is crap

* we use orig DN in ... expansion when targetting base entry, and entry DNs when
 looping thru subentries. This isn't quite alright as it'll break when base DN
 s coming from fallback (baseDN will be origDN, then on subentries, DN will 
 be fallbackDN)

* use ViperConfig.pm (server, bind DN, pw, etc.). Actually, let's just come
 to the stage where users are added to the directory and Viper checks
 credentials on bind (just simple password for start)

* allow rewriting of requested search attrs to return

* document for config file, ldif, value spec, when do \\ have to be 
 escaped, when is SPEC a filter and when a regex etc.

* query na host da otkrije keyeve koji postoje zbog defaulta i ukljuci ih u search osnovnog nivoa

* See if we can get rid of $entry->clone()s... Enormous time waster (3x)

* Apt sources to not include local cdrom

* origdn support for run_appender just like for run_overlays?

* multiple networks per client?

* 'store' overlay that saves computed value for real into the entry, i.e.
  random pw or IP host number

* doc note how to kill dbus on debconf hang if server cl+ced or exits

* see krb auth

* If overlay fails, hide that attribute from displaying since data in there
 is most probably incomplete (in some cases its hidden, but do it in 100% of
 cases). Or return error info about this thru operational attrs.

* If overlay fails, hide that attribute from displaying since data in there
 is most probably incomplete (in some cases its hidden, but do it in 100% of
 cases)

* putting value together after overlay work would break if evaluation result matches
 name of some overlay?

* automatic schema update -> create special suffix which is used just
 to trigger some behavior via specifications in filter or search base.
 One of the commands would refresh schema, and other suffixes would notice
 mtime change on schema file and reload.

* Debug prompter (question missing on question nr. > 1)

* don't tie host extra info to puppetClient, tie to extraInfo, configInfo,
 configData or so

- some trigger, that could run arbitrary things, like ipcalc to conver .255 -> /32 etc.

- See why ->must( $oc) wasn't working in Viper.pm test, and document that if you want
  to entryAppend, the original entry must be of the desired objectclasses

- config for DHCP to not accept unknown clients in the pool, so that if someone makes
a mistake in HW addr of a system, the IP it gets assigned is from a 'known bad' pool,
so that they can easily spot the mistake

* Allow search fallback only if the final component is missing, but the rest is
 there? Currently we don't check for that so what happens is whatever crap you
 search, it responds with ou=hosts, ou=defaults which is the final fallback that
 doesn't depend on input params

- different views of same data thru different suffix, virtual part of suffix
 gets removed on request entry and added on all results coming out. (Requires
 that Viper munges the DN to be would-be DN instead of whatever location on
 the disk is)

- check if modifyCopyOnWrite actually works (the case where whole entry comes
 from fallback, and then someone tries to modify it)

- See if after appending from seeAlsoAttr, that attr should be removed from
 the entry or it can stay in there. (Currently it stays)

- when debconf key changed, trigger reload of service owning the key? Or,
 general mechanism for thing like "when DN =~ /regex/ then run ....".

* Change searchFallback so that it's similar to searchSubst/entryAppend, i.e.
  should allow to specify conditions, and then rewrite a person wants. Infact,
  it should allow for generating new search bases placed on stack.
 - rewrite code a bit so that search base in sub search() is an array, then
   search all bases in array and append to the result set. (Reason: be able to
   rewrite search with an entry that returns a collection, i.e.
   cn=dhcp,cli1,...
   cn=dhcp,cli2,...

  How to do it? Well make directive with same behavior as searchSubst, but with
  the intention of adding new bases and corresponding options. Also with option
  to specify whether to add base always, or if no results from orig query.
  Actually that option ca be awk-like like NR>0 or something.

  Actually, in this case not only can this add new base but it can also run
  triggers, for example search in ou=dhcp and some ethernet addr can trigger
  creation of an entry with some IP, and then return that IP as if it was
  there.

* Make Viper its own package, with slap* version of tools -> vipercat, viperadd etc.

NOTES:
- pass on info about expansion etc. through operational attrs

# List of extra todos:
# - ldap server on every client host, delegate part of the tree to it
#   as a referral, for retrieving system data. I.e. 
#   ldapsearch cn=uptime,cn=hostname,ou=hosts,dc=,dc=
#   and the entry defining file $ /proc/uptime (which is symlink from
#   datadir to real /proc/uptime).
# - Optimize number of accesses to key from LDAP.pm (sub exists())
# - Implement delete in debconf's LDAP.pm?
# - See if krb auth can work
# - add support for setuid() or ticket/token obtain based on binding DN
# - anything to do with referral chasing?
# - cfg file option to enable/disable perm denied msgs on reading etc.
# - automatic creation of host entries when new host tries to read its config
#   (can do, but can it know the host's ethernet addr?)

#
# TODO!!!
# - consolidate Debconf patches
# - operational attrs?
