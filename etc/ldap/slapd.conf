# This is the main slapd configuration file. See slapd.conf(5) for more
# info on the configuration options.
#
# Crystal Labs, https://crystallabs.io/
#
# Released under GPL v3 or later.
#

#######################################################################
# Global Directives:

# Schema and objectClass definitions
include         /etc/ldap/schema/core.schema
include         /etc/ldap/schema/cosine.schema
include         /etc/ldap/schema/nis.schema
include         /etc/ldap/schema/inetorgperson.schema
include         /etc/ldap/schema/dhcp.schema
include         /etc/ldap/schema/debconf.schema
include         /etc/ldap/schema/puppet.schema
include         /etc/ldap/schema/spinlock.schema

# Where the pid file is put. The init.d script
# will not stop the server if you change this.
pidfile         /var/run/slapd/slapd.pid

# List of arguments that were passed to the server
argsfile        /var/run/slapd/slapd.args

# Read slapd.conf(5) for possible values
loglevel        256

# Where the dynamically loaded modules are stored
modulepath	/usr/lib/ldap
#moduleload	back_hdb
moduleload	back_perl

# The maximum number of entries that is returned for a search operation
sizelimit 500

# The tool-threads parameter sets the actual amount of cpu's that is used
# for indexing.
tool-threads 1

########################################################################
#
# DEFAULTS - configure ou=defaults tree which is intended to be read
#            only indirectly, via rewrites, appends and fallbacks from
#            other suffixes.
#
########################################################################

# The following lines with appropriate values must come at the top of
# every Viper db, in order as shown. Last option, treesuffix, is
# somewhat redundant to 'suffix', but is necessary since 'suffix' is
# consumed by OpenLDAP and not passed onto our Viper perl backend.
database           perl
suffix             "ou=defaults"
perlModulePath     "/etc/ldap/viper"
perlModule         "Viper"
directory          "/var/lib/ldap/viper/"
treesuffix         "ou=defaults"

# Administrator's bind DN and password that let user in with admin
# privileges, without checking for account and password validity in the
# LDAP directory.
# These options are recognized and processed by OpenLDAP, not Viper.
# Note that, due to slapd's design of access control for back-perl, any of
# the configured rootdns is be able to modify any suffix' data, not just
# the suffix under which it was defined.
rootdn             cn=admin,ou=defaults
rootpw             nevairbe

# During parsing, config directives are placed on memory stack, which can
# be saved to disk in one suffix, and loaded from another. This allows sharing
# of config chunks without manual config duplication etc. Here we prepare
# a new environment and start fresh by using 'clean' to remove all existing
# (old) stack files on disk and 'reset' to empty the in-memory stack.
# (Note: calling 'clean' usually makes sense only on the first configured
# suffix, like shown here. If you call 'clean' later, that'll delete
# stack files saved in earlier suffixes and, of course, you won't
# have any files to load).
clean
reset

# During parsing, it is possible to control whether expansion of
# ${var} and %{cfgname} in config values is enabled. The setting takes
# effect from place of definition til another setting or end of suffix
# configuration.
#parseVariables 1

# Define two variables and print message to the console, showing how
# to expand variables and values of config directives.
var                name ViperDB   status "All systems operational"
message            ${name}, configuring %{treesuffix} -- ${status}.

# Extension for LDIF files on disk that contain entries (must not be
# empty, as it serves to differentiate directories from leaf nodes)
#extension          .ldif

# Overwrite on ADD when an entry already exists?
#addOverwrites      0

# Ignore ADD when an entry already exists? (addOverwrites must be 0).
#addIgnoreDups      0

# Allow deleting non-leaf nodes?
#deleteTrees        1

# Is a missing schema LDIF fatal error? It should be, but we can tolerate
# it, because you are expected to start server without it, obtain it (using 
# scripts/schema.pl) and restart the server with it in place.
# Enable schemaFatal only if you already have the means of getting the schema
# in LDIF format, independent of being able to start the server.
# NOTE: This setting MUST come before schemaLDIF, and you MUST regenerate
# the schema LDIF file whenever you change server's *.schema files.
#schemaFatal        0

# Location of server's current schema in LDIF format. As said above, if you
# do not have it, the easy way to produce it is:
# 1) start without the file (you'll receive a warning about missing LDIF)
# 2) run 'perl scripts/schema.pl > /etc/ldap/schema/schema.ldif' to retrieve
#    schema from server and save it to the file
# 3) restart server (warning should be gone)
# 4) don't forget to REPEAT steps 2-4 if you change your server's schema
#    (any of the files in /etc/ldap/schema/).
# Note also that you can specify multiple files here and all of them will
# be loaded, even though that's a rarely needed function.
schemaLDIF         /etc/ldap/schema/schema.ldif

# Ignore MODIFY requests that do not result in a modified entry?
# (Debconf issues modify operation for all loaded keys even when their
# value was not changed, so detecting this is useful to preserve real
# file modification times).
#modifySmarts       1

# When modify is called on an entry that doesn't really exist on disk (i.e.
# it comes from a fallback), copy the default entry to the proper location
# and then modify it? (When 0, modifications to such entries are rejected).
#modifyCopyOnWrite  1

# default_opts chunk that can now be loaded by other suffixes (as long as
# they're configured with the same base directory).
save               default_opts
reset

# For a great performance enhancement, Viper can cache entries loaded
# from disk using the cacheRead directive and per-overlay caching rules.
# No setting disables caching. Cache expiry can be specified as time
# interval (5 [s]/m/h/d/w), number of internal uses (5u) or number of
# LDAP operations (5o).
#
# cacheRead shown here caches disk data for the duration of a single LDAP
# request - 1. It shows small improvement over uncached access, while
# still being per-operation and thus minimizing or eliminating chance of
# stale data being served.
# For orders of magnitude better performance improvements, enable overlay
# data caching (see below).
cacheRead 1

# Overlays can accept options, specified directly in overlay calls, or
# here, where both global and per-overlay defaults can be set.
#
# Here we specify default overlay cache time. Caching is used to speed up
# costly overlay evaluations which may happen a significant number of times
# during even a single operation.
# Cache expiry specification is the same as explained in cacheRead, and
# 1 is again overall best setting.
# While cacheRead gives noticeable (but small) speedup, caching the overlay
# results here gives enormous performance boost.
overlayConfig      default   cache 1

save               cache_opts

# Save a Storable dump of config to DIRECTORY/tmp/NAME. The dump is made
# as soon as the directive occurs, so to dump the whole config for suffix,
# place this line as shown here, at the end of suffix configuration.
# Note that these dumps are not intended to be loaded back into slapd
# (you should generally never encounter loadDump directive in the slapd
# config file).
# The purpose of the dumps is to loadDump them from scripts running Viper
# in test/debug/standalone mode, without slapd (see scripts/viper.pl).
saveDump           %{treesuffix}.dump


########################################################################
#
# DHCP     - configure ou=dhcp tree which is intended to be used by
#            the ISC DHCP3 server with LDAP support. The real data is
#            kept under ou=clients, not here, so to produce the correct
#            information expected by DHCP, this suffix sports some dynamic
#            rewriting, substitution and append magic.
#
#            Btw, to instruct LDAP-enabled DHCP3 server to use LDAP and
#            ou=dhcp, configure it as follows in /etc/dhcp3/dhcpd.conf:
#
#            ldap-server "10.0.0.1";
#            ldap-port 389;
#            #ldap-username "cn=dhcpd, ou=dhcp";
#            #ldap-password "nevairbe";
#            ldap-base-dn "ou=dhcp";
#            ldap-method dynamic;
#            ldap-debug-file "/var/log/dhcp-ldap-startup.log";
#            ldap-ssl off;
#
########################################################################

database           perl
suffix             "ou=dhcp"
perlModulePath     "/etc/ldap/viper"
perlModule         "Viper"
directory          "/var/lib/ldap/viper/"
treesuffix         "ou=dhcp"

rootdn             cn=admin,ou=dhcp
rootpw             nevairbe

load               default_opts
load               cache_opts

reset

# Must-match/Must-not-match regexes that must match and not-match a DN
# respectively to have expandVal overlay run on the entry's attributes.
# This value is a match-all setting, and it is included here because any
# overlay with no config lines is essentially disabled.
expandVal          .   ^$

# Must-match/Must-not-match regexes that must match and not-match a DN
# respectively to have fileVal overlay run on the entry's attributes.
fileVal            .   ^$

# Must-match/Must-not-match regexes that must match and not-match a DN
# respectively to have findVal overlay run on the entry's attributes.
findVal            .   ^$

# Must-match/Must-not-match regexes that must match and not-match a DN
# respectively to have perlVal overlay run on the entry's attributes.
# NOTE: the Perl evaluation overlay is dangerous and is by default disabled
#perlVal            .   ^$

save               dynamic_opts
reset

# searchSubst matches a series of input search parameters. If all listed
# parameters match, a rewrite of any search params can be made. The list
# of conditions and the list of rewrites to be made are separated by '->'.
# Note: the following example completely substitutes the search base, it
# moves search from ou=dhcp to ou=clients on the same level, which would
# not be accessible without a rewrite (it's technically a different suffix).
# Also, note that THIS suffix' settings apply to the search, even if the
# search is rewritten to a tree that belongs to another suffix.
# (This property also allows having different views of the same data by
# simply configuring different suffixes with different options, under the
# same base directory).
#
# Solve lack of flexibility in ISC DHCP3 LDAP patch by plainly specifying
# ldap-base-dn "ou=dhcp" in DHCP's config, and then here, rewriting DHCP
# ethernet address lookup to the ou=clients tree under which all clients
# are defined.
searchSubst        base        "^ou=dhcp$"                       \
                   filter      "\\(objectClass=dhcpHost\\)"      \
                   ->                                            \
                   base   .+   ou=clients

# Rewrite dhcpServer search to cn=viper. This makes it possible to always
# use entry cn=viper,ou=dhcp in DHCP settings, and to not have to adjust
# cn= to match server name. On the downside, it limits the correct behavior
# to just one DHCP server querying this LDAP.
# In case you have multiple DHCP servers or if you are using this in an
# existing setup and do not want this rewrite to happen, comment
# this rewrite, and in ldifs/1-dhcp.ldif rename cn=viper to your actual
# host name.
searchSubst        base        "^ou=dhcp$"                       \
                   filter      "\\(objectClass=dhcpServer\\)"    \
                   ->                                            \
                   filter   .+ "(&(objectClass=dhcpServer)(cn=viper))"

# Rewrite subnets search in any shared network to ou=clients.
# base="ou=sharednetwork,ou=dhcp" scope=1 deref=0 filter="(|(|(objectClass=dhcpTSigKey)(objectClass=dhcpClass))(objectClass=dhcpFailOverPeer))"
searchSubst        base        "^ou=\\w+,ou=dhcp$"               \
                   scope       "^1$"                             \
                   filter      "^\\(objectClass=\\*\\)$"         \
                   ->                                            \
                   base   .+   "ou=clients"                      \
                   filter .+   "(&(objectClass=dhcpSubnet)(!(cn=default)))" \
                   scope  .+   2

reset

# entryAppend appends entries with attributes from other entries.
# Match can be made on any attribute/value pair of the original entry
# (in our examples, we match on objectClass and dn).
# Append source can be specified in place (first two examples), or indirectly
# through an attribute in the existing entry (third example).
entryAppend        objectClass "^dhcpHost$"                      \
                   ->                                            \
                   append .+ cn=dhcpHost,ou=objectClasses,ou=defaults

entryAppend        objectClass "^dhcpSubnet$"                    \
                   ->                                            \
                   append .+ cn=dhcpSubnet,ou=objectClasses,ou=defaults

entryAppend        dn          "^cn=default,ou=networks"         \
                   objectClass "^(?:x-)?ipNetwork$"              \
                   ->                                            \
                   attr seeAlso

save               dhcp_opts

saveDump           %{treesuffix}.dump


########################################################################
# 
# Debconf  - configure ou=debconf tree which is intended to be used by
#            Debconf clients
#
########################################################################

database           perl
suffix             "ou=debconf"
perlModulePath     "/etc/ldap/viper"
perlModule         "Viper"
directory          "/var/lib/ldap/viper/"
treesuffix         "ou=debconf"

rootdn             cn=admin,ou=debconf
rootpw             nevairbe

load               default_opts
load               dynamic_opts
load               cache_opts
load               dhcp_opts

reset

# Debconf clients are supposed to already query the correct thing,
# we just need to replace ou=debconf$ with ou=clients
searchSubst        base        .                                 \
                   ->                                            \
                   base   ",ou=\\w+$" ",ou=clients"

# Add attributes useful in the context of Puppet and configuration management
# XXX move to ou=puppet
entryAppend        objectClass "^(?:x-)?puppetClient$"           \
                   ->                                            \
                   append .+ cn=puppetClient,ou=objectClasses,ou=defaults

save               data_opts

# searchFallback implements entry defaults. When a search base is not found,
# try a substitution on its DN. If the substitution succeeds, retry
# search with the new, modified base. The first of the configured fallbacks
# wins.

# Fallback 1: site defaults tree.
searchFallback     cn=.[^,\\s]+,ou=hosts         ou=hosts,ou=defaults
searchFallback     cn=.[^,\\s]+,ou=templates     ou=templates,ou=defaults

# Fallback 2: global defaults tree.
searchFallback     cn=.[^,\\s]+,ou=hosts,.+      ou=hosts,ou=defaults
searchFallback     cn=.[^,\\s]+,ou=templates,.+  ou=templates,ou=defaults

# Define relocation points. When Debconf clients pass on information
# about where to relocate config value, their spec will be a symbolic
# name, such as 'Site' or 'Global'. Values here define substitutions
# to perform to produce the new, relocated DN.
addRelocate        Site   ,cn=\\S+?,ou=   ,ou=defaults,ou=

# addPrompt directive configure the server-side Debconf prompter.
# Prompter is activated when template matches the DN, and is successful
# if substitution succeeds and matching config value is found.
#addPrompt          cn=\\S+?,cn=\\w+,ou=templates,o=  ,ou=templates,  ,ou=hosts,

saveDump           %{treesuffix}.dump


########################################################################
# 
# Puppet   - configure ou=puppet tree which is intended to be used by
#            Puppet or Viper's node_data script
#
########################################################################

database           perl
suffix             "ou=puppet"
perlModulePath     "/etc/ldap/viper"
perlModule         "Viper"
directory          "/var/lib/ldap/viper/"
treesuffix         "ou=puppet"

rootdn             cn=admin,ou=puppet
rootpw             nevairbe

load               default_opts
load               dynamic_opts
load               cache_opts
load               dhcp_opts
load               data_opts

saveDump           %{treesuffix}.dump


########################################################################
# 
# Clients  - configure ou=clients tree which is intended to be used by
#            basically everything (preseed, Debconf, Puppet, scripts and
#            LDAP browsers).
#
########################################################################

database           perl
suffix             "ou=clients"
perlModulePath     "/etc/ldap/viper"
perlModule         "Viper"
directory          "/var/lib/ldap/viper/"
treesuffix         "ou=clients"

rootdn             cn=admin,ou=clients
rootpw             nevairbe

load               default_opts
load               dynamic_opts
load               cache_opts
#load               dhcp_opts

saveDump           %{treesuffix}.dump

