# This is the main slapd configuration file. See slapd.conf(5) for more
# info on the configuration options.

#######################################################################
# Global Directives:

# Features to permit
#allow bind_v2

# Schema and objectClass definitions
include         /etc/ldap/schema/core.schema
include         /etc/ldap/schema/cosine.schema
include         /etc/ldap/schema/nis.schema
include         /etc/ldap/schema/inetorgperson.schema
include         /etc/ldap/schema/dhcp.schema
include         /etc/ldap/schema/debconf.schema
include         /etc/ldap/schema/puppet.schema
include         /etc/ldap/schema/spinlock.schema

# Where the pid file is put. The init.d script
# will not stop the server if you change this.
pidfile         /var/run/slapd/slapd.pid

# List of arguments that were passed to the server
argsfile        /var/run/slapd/slapd.args

# Read slapd.conf(5) for possible values
loglevel        256

# Where the dynamically loaded modules are stored
modulepath	/usr/lib/ldap
#moduleload	back_hdb
moduleload	back_perl

# The maximum number of entries that is returned for a search operation
sizelimit 500

# The tool-threads parameter sets the actual amount of cpu's that is used
# for indexing.
tool-threads 1

#######################################################################
# Specific Backend Directives for hdb:
# Backend specific directives apply to this backend until another
# 'backend' directive occurs
#backend		hdb

#######################################################################
# Specific Backend Directives for 'other':
# Backend specific directives apply to this backend until another
# 'backend' directive occurs
#backend		<other>
#
########################################################################
## Specific Directives for database #1, of type hdb:
## Database specific directives apply to this databasse until another
## 'database' directive occurs
#database        hdb
#
## The base of your directory in database #1
#suffix          "dc=spinlock,dc=hr"
#
## rootdn directive for specifying a superuser on the database. This is needed
## for syncrepl.
## rootdn          "cn=admin,dc=spinlock,dc=hr"
#
## Where the database file are physically stored for database #1
#directory       "/var/lib/ldap"
#
## The dbconfig settings are used to generate a DB_CONFIG file the first
## time slapd starts.  They do NOT override existing an existing DB_CONFIG
## file.  You should therefore change these settings in DB_CONFIG directly
## or remove DB_CONFIG and restart slapd for changes to take effect.
#
## For the Debian package we use 2MB as default but be sure to update this
## value if you have plenty of RAM
#dbconfig set_cachesize 0 2097152 0
#
## Sven Hartge reported that he had to set this value incredibly high
## to get slapd running at all. See http://bugs.debian.org/303057 for more
## information.
#
## Number of objects that can be locked at the same time.
#dbconfig set_lk_max_objects 1500
## Number of locks (both requested and granted)
#dbconfig set_lk_max_locks 1500
## Number of lockers
#dbconfig set_lk_max_lockers 1500
#
## Indexing options for database #1
#index           objectClass eq
#
## Save the time that the entry gets modified, for database #1
#lastmod         on
#
## Checkpoint the BerkeleyDB database periodically in case of system
## failure and to speed slapd shutdown.
#checkpoint      512 30
#
## Where to store the replica logs for database #1
## replogfile	/var/lib/ldap/replog
#
## The userPassword by default can be changed
## by the entry owning it if they are authenticated.
## Others should not be able to see it, except the
## admin entry below
## These access lines apply to database #1 only
#access to attrs=userPassword,shadowLastChange
#        by dn="cn=admin,dc=spinlock,dc=hr" write
#        by anonymous auth
#        by self write
#        by * none
#
## Ensure read access to the base for things like
## supportedSASLMechanisms.  Without this you may
## have problems with SASL not knowing what
## mechanisms are available and the like.
## Note that this is covered by the 'access to *'
## ACL below too but if you change that as people
## are wont to do you'll still need this if you
## want SASL (and possible other things) to work 
## happily.
#access to dn.base="" by * read
#
## The admin dn has full write access, everyone else
## can read everything.
#access to *
#        by dn="cn=admin,dc=spinlock,dc=hr" write
#        by * read
#
## For Netscape Roaming support, each user gets a roaming
## profile for which they have write access to
##access to dn=".*,ou=Roaming,o=morsnet"
##        by dn="cn=admin,dc=spinlock,dc=hr" write
##        by dnattr=owner write
#
########################################################################
## Specific Directives for database #2, of type 'other' (can be hdb too):
## Database specific directives apply to this databasse until another
## 'database' directive occurs
##database        <other>
#
## The base of your directory for database #2
##suffix		"dc=debian,dc=org"


#
# ViperDB config.
#
# This production-grade config shows 3 configured suffixes and should
# be used as a reference on all supported config directives. Each
# directive is documented and an example shown. If the example does not
# differ from the default value, the directive is commented with '#'.
#
#
# SPINLOCK - Advanced GNU/Linux networks in commercial and education sectors
#
# Copyright 2008-2009 SPINLOCK d.o.o., http://www.spinlocksolutions.com/
#                     Davor Ocelic, docelic@spinlocksolutions.com
#
# http://www.spinlocksolutions.com/
# http://techpubs.spinlocksolutions.com/
#
# Released under GPL v3 or later.
#
#

########################################################################
#
# DEFAULTS - configure ou=defaults tree which is intended to be read
#            only indirectly, via rewrites, appends and fallbacks from
#            other suffixes.
#
########################################################################

# The following lines with appropriate values must come at the top of
# every Viper db, in order as shown. Last option, treesuffix, is
# somewhat redundant to 'suffix', but is necessary since 'suffix' is
# consumed by OpenLDAP and not passed onto our Viper perl backend.
database           perl
suffix             "ou=defaults"
perlModulePath     "/etc/ldap/viper"
perlModule         "Viper"
directory          "/var/lib/ldap/viper/"
treesuffix         "ou=defaults"

# Administrator's bind DN and password that let user in with admin
# privileges, without checking for account and password validity in
# LDAP directory.
# These options are recognized and processed by OpenLDAP, not Viper.
# Note that, due to slapd's design of access control, any of the configured
# rootdns is be able to modify any suffix' data, not just the suffix under
# which it was defined.
rootdn             cn=admin,ou=defaults
rootpw             nevairbe

# During parsing, config directives are placed on memory stack, which can
# be saved to disk in one suffix, and loaded from another. This allows sharing
# of config chunks without manual config duplication etc. Here we prepare
# a new environment and start fresh by using 'clean' to remove all existing
# (old) stack files on disk and 'reset' to empty the in-memory stack.
# (Note: calling 'clean' usually makes sense only on the first configured
# suffix, like shown here. If you call 'clean' later, that'll delete
# stack files saved in earlier suffixes and, of course, you won't
# have any files to load).
clean
reset

# During parsing, it is possible to control whether expansion of
# ${var} and %{cfgname} in config values is enabled. The setting takes
# effect from place of definition til another setting or end of suffix
# configuration.
#parseVariables 1

# For a great performance enhancement, Viper can cache entries loaded
# from disk using the cacheOpen directive and per-overlay caching rules.
# No setting disables caching. Cache expiry can be specified as time
# interval (5 [s]/m/h/d/w), number of internal uses (5u) or number of
# LDAP operations (5o).
#
# cacheOpen shown here caches disk data for the duration of a single LDAP
# request - 1o. It shows small improvement over uncached access, while
# still being per-operation and thus minimizing or eliminating chance of
# stale data being served.
# For orders of magnitude better performance improvements, enable overlay
# data caching (see below).
# Timed or multiple u/o cache achieves another improvement compared to 1o,
# but it does run into risk of serving stale data (obviously), so 1o is by
# far best setting for reasonably-sized trees.
cacheOpen 1o

# Define two variables and print message to the console, showing how
# to expand variables and values of config directives.
var                name ViperDB   status "All systems operational"
message            ${name}, configuring %{treesuffix} -- ${status}.

# Extension for LDIF files on disk that contain entries (must not be
# empty, as it serves to differentiate directories from leaf nodes)
#extension          .ldif

# Overwrite on ADD when an entry already exists?
#addOverwrites      0

# Ignore ADD when an entry already exists? (addOverwrites must be 0).
#addIgnoreDups      0

# Allow deleting non-leaf nodes?
#deleteTrees        1

# Is a missing schema LDIF fatal error? It should be, but we can tolerate
# it, because you are expected to start server without it, obtain it (using 
# scripts/schema.pl) and restart the server with it in place.
# Enable schemaFatal only if you already have the means of getting the schema
# in LDIF format, independent of being able to start the server.
# NOTE: This setting MUST come before schemaLDIF, and you MUST regenerate
# the schema LDIF file whenever you change server's *.schema files.
#schemaFatal        0

# Location of server's current schema in LDIF format. As said above, if you
# do not have it, the easy way to produce it is:
# 1) start without the file (you'll receive a warning about missing LDIF)
# 2) run 'perl scripts/schema.pl > /etc/ldap/schema/schema.ldif' to retrieve
#    schema from server and save it to the file
# 3) restart server (warning should be gone)
# 4) don't forget to REPEAT steps 2-4 if you change your server's schema
#    (any of the files in /etc/ldap/schema/).
# Note also that you can specify multiple files here and all of them will
# be loaded, even though that's a rarely needed function.
schemaLDIF         /etc/ldap/schema/schema.ldif

# Ignore MODIFY requests that do not result in a modified entry?
# (Debconf issues modify operation for all loaded keys even when their
# value was not changed, so detecting this is useful to preserve real
# file modification times).
#modifySmarts       1

# When modify is called on an entry that doesn't really exist on disk (i.e.
# it comes from a fallback), copy the default entry to the proper location
# and then modify it? (When 0, modifications to such entries are rejected).
#modifyCopyOnWrite  1

# default_opts chunk that can now be loaded by other suffixes (as long as
# they're configured with the same base directory).
save               default_opts


########################################################################
#
# DHCP     - configure ou=dhcp tree which is intended to be used by
#            the ISC DHCP3 server with LDAP support. The real data is
#            kept under ou=clients, not here, so to produce the correct
#            information expected by DHCP, this suffix sports some dynamic
#            rewriting, substitution and append magic.
#
#            Btw, to instruct LDAP-enabled DHCP3 server to use LDAP and
#            ou=dhcp, configure it as follows in /etc/dhcp3/dhcpd.conf:
#
#            ldap-server "10.0.0.1";
#            ldap-port 389;
#            #ldap-username "cn=dhcpd, ou=dhcp";
#            #ldap-password "nevairbe";
#            ldap-base-dn "ou=dhcp";
#            ldap-method dynamic;
#            ldap-debug-file "/var/log/dhcp-ldap-startup.log";
#            ldap-ssl off;
#
########################################################################

database           perl
suffix             "ou=dhcp"
perlModulePath     "/etc/ldap/viper"
perlModule         "Viper"
directory          "/var/lib/ldap/viper/"
treesuffix         "ou=dhcp"

rootdn             cn=admin,ou=dhcp
rootpw             nevairbe

load               default_opts

reset

# Must-match/Must-not-match regexes that must match and not-match a DN
# respectively to have expandVal overlay run on the entry's attributes.
# This value is a match-all setting, and it is included here because any
# overlay with no config lines is essentially disabled.
expandVal          .   ^$

# Must-match/Must-not-match regexes that must match and not-match a DN
# respectively to have fileVal overlay run on the entry's attributes.
fileVal            .   ^$

# Must-match/Must-not-match regexes that must match and not-match a DN
# respectively to have findVal overlay run on the entry's attributes.
findVal            .   ^$

# Must-match/Must-not-match regexes that must match and not-match a DN
# respectively to have perlVal overlay run on the entry's attributes.
# NOTE: even though it is configured here, the Perl evaluation overlay
# is dangerous and is by default disabled in Viper backend. To activate
# it, open Viper.pm and enable constant PERLEVAL.
perlVal            .   ^$

save               dynamic_opts
reset

# Overlays can accept options, specified directly in overlay calls, or
# here, where both global and per-overlay defaults can be set.
#
# Here we specify default overlay cache time. Caching is used to speed up
# costly overlay evaluations which may happen a significant number of times
# during even a single operation.
# Cache expiry specification is the same as explained in cacheOpen, and
# 1o is again overall best setting.
# While cacheOpen gives noticeable (but small) speedup, caching the overlay
# results here gives enormous performance boost.
overlayConfig      default   cache 1o
#overlayConfig      exp   cache 5m

save               cache_opts

# searchSubst matches a series of input search parameters. If all listed
# parameters match, a rewrite of any search params can be made. The list
# of conditions and the list of rewrites to be made are separated by '->'.
# Note: the following example completely substitutes the search base, it
# moves search from ou=dhcp to ou=clients on the same level, which would
# not be accessible without a rewrite (it's technically a different suffix).
# Also, note that THIS suffix' settings apply to the search, even if the
# search is rewritten to a tree that belongs to another suffix.
# (This property also allows having different views of the same data by
# simply configuring different suffixes with different options, under the
# same base directory).
#
# Solve lack of flexibility in ISC DHCP3 LDAP patch by plainly specifying
# ldap-base-dn "ou=dhcp" in DHCP's config, and then here, rewriting DHCP
# ethernet address lookup to the ou=clients tree under which all clients
# are defined.
searchSubst        base        "^ou=dhcp$"                       \
                   filter      "\\(objectClass=dhcpHost\\)"      \
                   ->                                            \
                   base   .+   ou=clients

# Rewrite dhcpServer search to cn=viper. This makes it possible to always
# use entry cn=viper,ou=dhcp in DHCP settings, and to not have to adjust
# cn= to match server name. In case you have multiple configurations or
# are using this in an existing setup and do not want this redirection to
# happen (as it limits lookup to a single server confguration), comment
# this rewrite, and in ldifs/1-dhcp.ldif, rename cn=viper to your actual
# host name.
searchSubst        base        "^ou=dhcp$"                       \
                   filter      "\\(objectClass=dhcpServer\\)"    \
                   ->                                            \
                   filter   .+ "(&(objectClass=dhcpServer)(cn=viper))"

# Rewrite subnets search in any shared network to ou=clients.
searchSubst        base        "^ou=\\w+,ou=dhcp$"               \
                   scope       "^1$"                             \
                   filter      "^\\(objectClass=\\*\\)$"         \
                   ->                                            \
                   base   .+   "ou=clients"                      \
                   filter .+   "(&(objectClass=dhcpSubnet)(!(cn=default)))" \
                   scope  .+   2

reset

# entryAppend appends entries with attributes from other entries.
# Match can be made on any attribute/value pair of the original entry
# (in our examples, we match on objectClass and dn).
# Append source can be specified in place (first two examples), or indirectly
# through an attribute in the existing entry (third example).
entryAppend        objectClass "^dhcpHost$"                      \
                   ->                                            \
                   append .+ cn=dhcpHost,ou=objectClasses,ou=defaults

entryAppend        objectClass "^dhcpSubnet$"                    \
                   ->                                            \
                   append .+ cn=dhcpSubnet,ou=objectClasses,ou=defaults

entryAppend        dn          "^cn=default,ou=networks"         \
                   objectClass "^(?:x-)?ipNetwork$"              \
                   ->                                            \
                   attr seeAlso

save               dhcp_opts


########################################################################
# 
# Clients  - configure ou=clients tree which is intended to be used by
#            basically everything (preseed, Debconf, Puppet, scripts and
#            LDAP browsers).
#
########################################################################

database           perl
suffix             "ou=clients"
perlModulePath     "/etc/ldap/viper"
perlModule         "Viper"
directory          "/var/lib/ldap/viper/"
treesuffix         "ou=clients"

rootdn             cn=admin,ou=clients
rootpw             nevairbe

load               default_opts
load               dynamic_opts
load               cache_opts
load               dhcp_opts

# Add attributes useful in the context of Puppet and configuration management
entryAppend        objectClass "^(?:x-)?puppetClient$"           \
                   ->                                            \
                   append .+ cn=puppetClient,ou=objectClasses,ou=defaults

# searchFallback implements entry defaults. When a search base is not found,
# try a substitution on its DN. If the substitution succeeds, retry
# search with the new, modified base. The first of the configured fallbacks
# wins.

# Fallback 1: site defaults tree.
searchFallback     cn=.[^,\\s]+,ou=hosts         ou=hosts,ou=defaults
searchFallback     cn=.[^,\\s]+,ou=templates     ou=templates,ou=defaults

# Fallback 2: global defaults tree.
searchFallback     cn=.[^,\\s]+,ou=hosts,.+      ou=hosts,ou=defaults
searchFallback     cn=.[^,\\s]+,ou=templates,.+  ou=templates,ou=defaults

# Define relocation points. When Debconf clients pass on information
# about where to relocate config value, their spec will be a symbolic
# name, such as 'Site' or 'Global'. Values here define substitutions
# to perform to produce the new, relocated DN.
addRelocate        Site   ,cn=\\S+?,ou=   ,ou=defaults,ou=

# addPrompt directive configure the server-side Debconf prompter.
# Prompter is activated when template matches the DN, and is successful
# if substitution succeeds and matching config value is found.
addPrompt          cn=\\S+?,cn=\\w+,ou=templates,o=  ,ou=templates,  ,ou=hosts,

# Save a Storable dump of config to DIRECTORY/tmp/NAME. The dump is made
# as soon as the directive occurs, so to dump the whole config for suffix,
# place this line as shown here, at the end of suffix configuration.
# Note that these dumps are not intended to be loaded back into slapd
# (you should generally never encounter loadDump directive in the slapd
# config file).
# The purpose of the dumps is to loadDump them from scripts running Viper
# in test/debug/standalone mode, such as with scripts/viper.pl.
saveDump           %{treesuffix}.dump

#########################################################################
##
## STATIC VIEW OF THE WHOLE TREE
##
#########################################################################
#
## So by default, Viper splits all data to above three suffixes:
## ou=defaults, ou=dhcp and ou=clients.
##
## In our configuration, all suffixes share a common base directory and can
## see each other's data (with appropriate searchSubst rewrites). This is a
## legitimate feature that we use under ou=dhcp tree, check above for details.
##
## Each of the suffixes is also configured with their own dynamic behavior
## settings, allowing the same on-disk data to look differently, depending
## on which suffix received the request and applied its settings.
##
## So we can use those two properties to create "views" -- displays of the
## same data with different dynamic behavior options. One of the views that
## first comes to mind is a view of the whole tree with all dynamic behavior
## disabled. This makes it easy to see the tree as-is, without any data
## munging in effect on the way out of the server.
## Also, in certain cases, modifying data through that tree might be easier
## than when dynamic properties are in use).
##
## So let's do it, and show elegant configuration:
#
#database           perl
#suffix             "ou=static"
#perlModulePath     "/etc/ldap/viper"
#perlModule         "Viper"
#directory          "/var/lib/ldap/viper/"
#treesuffix         "ou=static"
#
## Set of options that disable all dynamic behavior. (Note: boolean settings
## are listed here explicitly; other dynamic features such as expandval,
## fileval etc. are implicitly disabled when they have no config lines).
#addOverwrites      0
#addIgnoreDups      0
#modifySmarts       0
#modifyCopyOnWrite  0
#deleteTrees        1
#


